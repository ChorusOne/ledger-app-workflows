name: Functional tests using Ragger

on:
  workflow_call:
    inputs:
      app_repository:
        description: 'The GIT repository to test (defaults to `github.repository`)'
        required: false
        default: ${{ github.repository }}
        type: string
      app_branch_name:
        description: 'The GIT branch to test (defaults to `github.ref`)'
        required: false
        default: ${{ github.ref }}
        type: string
      relative_app_directory:
        description: "The directory where the application is built (defaults to current directory)"
        required: false
        default: .
        type: string
      test_dir:
        description: "The directory where the Python tests are stored (a `conftest.py` file is expected there). Required"
        required: true
        type: string
      download_app_binaries_artifact:
        description: "The name of the artifact containing the application binary file(s) to be tested. Required"
        required: true
        type: string
      lib_binaries_artifact:
        description: "The name of the artifact containing the library binary file(s), if needed by the application to be tested (defaults to empty string)"
        required: false
        default: ''
        type: string
      run_for_devices:
        description: 'The list of device(s) on which the test will run (defaults to ["nanos", "nanox", "nanosp", "stax"])'
        required: false
        default: '["nanos", "nanox", "nanosp", "stax"]'
        type: string
      skip_stax:
        description: "If the tests are not to be run on Stax device (defaults to false)"
        required: false
        default: false
        type: boolean

jobs:
  ragger_tests:
    name: Functional tests with Ragger
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJSON(inputs.run_for_devices) }}
    runs-on: ubuntu-latest

    steps:
      - name: Clone
        if: ${{ !( inputs.skip_stax && matrix.device == 'stax' ) }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.app_repository }}
          ref: ${{ inputs.app_branch_name }}
          submodules: recursive

      - name: Download app binaries
        if: ${{ !( inputs.skip_stax && matrix.device == 'stax' ) }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.download_app_binaries_artifact }}
          path: ${{ inputs.relative_app_directory }}/build/

      - name: Download additional lib binaries if required
        if: ${{ inputs.lib_binaries_artifact != '' && !( inputs.skip_stax && matrix.device == 'stax' ) }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.lib_binaries_artifact }}
          path: ${{ inputs.test_dir }}/lib_binaries/

      - name: Install tests dependencies
        if: ${{ !( inputs.skip_stax && matrix.device == 'stax' ) }}
        run: |
          sudo apt-get update && sudo apt-get install -y qemu-user-static tesseract-ocr libtesseract-dev
          pip install --extra-index-url https://test.pypi.org/simple/ -r ${{ inputs.test_dir }}/requirements.txt

      - name: Run test
        if: ${{ !( inputs.skip_stax && matrix.device == 'stax' ) }}
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        run: pytest ${{ inputs.test_dir }}/ --tb=short -v --device ${{ matrix.device }}
